// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_0_0 (
        ap_clk,
        ap_rst,
        data_0_V_read,
        data_1_V_read,
        data_2_V_read,
        data_3_V_read,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [15:0] data_0_V_read;
input  [15:0] data_1_V_read;
input  [15:0] data_2_V_read;
input  [15:0] data_3_V_read;
output  [15:0] ap_return;
input   ap_ce;

reg[15:0] ap_return;

reg   [15:0] tmp_5_reg_263;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [12:0] tmp_6_reg_268;
reg   [14:0] tmp_9_reg_273;
reg   [15:0] tmp_5_3_reg_278;
wire  signed [15:0] r_V_6_2_fu_78_p0;
wire    ap_block_pp0_stage0;
wire  signed [15:0] r_V_6_fu_79_p0;
wire  signed [15:0] r_V_6_3_fu_80_p0;
wire  signed [15:0] r_V_6_1_fu_81_p0;
wire   [25:0] r_V_6_fu_79_p2;
wire   [22:0] r_V_6_1_fu_81_p2;
wire   [24:0] r_V_6_2_fu_78_p2;
wire   [25:0] r_V_6_3_fu_80_p2;
wire  signed [15:0] tmp_7_fu_235_p1;
wire   [15:0] tmp2_fu_246_p2;
wire  signed [15:0] tmp_s_fu_238_p1;
wire   [15:0] tmp1_fu_251_p2;
wire   [15:0] tmp_fu_241_p2;
wire   [15:0] res_V_write_assign_fu_257_p2;
reg    ap_ce_reg;
reg   [15:0] ap_return_int_reg;

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= res_V_write_assign_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        tmp_5_3_reg_278 <= {{r_V_6_3_fu_80_p2[25:10]}};
        tmp_5_reg_263 <= {{r_V_6_fu_79_p2[25:10]}};
        tmp_6_reg_268 <= {{r_V_6_1_fu_81_p2[22:10]}};
        tmp_9_reg_273 <= {{r_V_6_2_fu_78_p2[24:10]}};
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = res_V_write_assign_fu_257_p2;
    end
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign r_V_6_1_fu_81_p0 = data_1_V_read;

assign r_V_6_1_fu_81_p2 = ($signed(r_V_6_1_fu_81_p0) * $signed('h2F));

assign r_V_6_2_fu_78_p0 = data_2_V_read;

assign r_V_6_2_fu_78_p2 = ($signed(r_V_6_2_fu_78_p0) * $signed('hE4));

assign r_V_6_3_fu_80_p0 = data_3_V_read;

assign r_V_6_3_fu_80_p2 = ($signed(r_V_6_3_fu_80_p0) * $signed('h36F));

assign r_V_6_fu_79_p0 = data_0_V_read;

assign r_V_6_fu_79_p2 = ($signed(r_V_6_fu_79_p0) * $signed(-'h30A));

assign res_V_write_assign_fu_257_p2 = (tmp1_fu_251_p2 + tmp_fu_241_p2);

assign tmp1_fu_251_p2 = ($signed(tmp2_fu_246_p2) + $signed(tmp_s_fu_238_p1));

assign tmp2_fu_246_p2 = (tmp_5_3_reg_278 + 16'd489);

assign tmp_7_fu_235_p1 = $signed(tmp_6_reg_268);

assign tmp_fu_241_p2 = ($signed(tmp_5_reg_263) + $signed(tmp_7_fu_235_p1));

assign tmp_s_fu_238_p1 = $signed(tmp_9_reg_273);

endmodule //dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_0_0

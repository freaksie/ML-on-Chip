-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_0_0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_0_0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv25_E4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000011100100";
    constant ap_const_lv26_3FFFCF6 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111110011110110";
    constant ap_const_lv26_36F : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001101101111";
    constant ap_const_lv23_2F : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000101111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv16_1E9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000111101001";

    signal tmp_5_reg_263 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_6_reg_268 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_9_reg_273 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_3_reg_278 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_6_2_fu_78_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal r_V_6_fu_79_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_6_3_fu_80_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_6_1_fu_81_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_6_fu_79_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_6_1_fu_81_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_6_2_fu_78_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_6_3_fu_80_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_7_fu_235_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_fu_246_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_238_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_251_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_241_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_write_assign_fu_257_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal ap_return_int_reg : STD_LOGIC_VECTOR (15 downto 0);


begin




    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= res_V_write_assign_fu_257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then
                tmp_5_3_reg_278 <= r_V_6_3_fu_80_p2(25 downto 10);
                tmp_5_reg_263 <= r_V_6_fu_79_p2(25 downto 10);
                tmp_6_reg_268 <= r_V_6_1_fu_81_p2(22 downto 10);
                tmp_9_reg_273 <= r_V_6_2_fu_78_p2(24 downto 10);
            end if;
        end if;
    end process;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(res_V_write_assign_fu_257_p2, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= res_V_write_assign_fu_257_p2;
        end if; 
    end process;

    r_V_6_1_fu_81_p0 <= data_1_V_read;
    r_V_6_1_fu_81_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_6_1_fu_81_p0) * signed('0' &ap_const_lv23_2F))), 23));
    r_V_6_2_fu_78_p0 <= data_2_V_read;
    r_V_6_2_fu_78_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_6_2_fu_78_p0) * signed('0' &ap_const_lv25_E4))), 25));
    r_V_6_3_fu_80_p0 <= data_3_V_read;
    r_V_6_3_fu_80_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_6_3_fu_80_p0) * signed('0' &ap_const_lv26_36F))), 26));
    r_V_6_fu_79_p0 <= data_0_V_read;
    r_V_6_fu_79_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_6_fu_79_p0) * signed(ap_const_lv26_3FFFCF6))), 26));
    res_V_write_assign_fu_257_p2 <= std_logic_vector(unsigned(tmp1_fu_251_p2) + unsigned(tmp_fu_241_p2));
    tmp1_fu_251_p2 <= std_logic_vector(unsigned(tmp2_fu_246_p2) + unsigned(tmp_s_fu_238_p1));
    tmp2_fu_246_p2 <= std_logic_vector(unsigned(tmp_5_3_reg_278) + unsigned(ap_const_lv16_1E9));
        tmp_7_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_reg_268),16));

    tmp_fu_241_p2 <= std_logic_vector(unsigned(tmp_5_reg_263) + unsigned(tmp_7_fu_235_p1));
        tmp_s_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_reg_273),16));

end behav;

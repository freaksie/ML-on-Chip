// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_0_0 (
        ap_clk,
        ap_rst,
        data_0_V_read,
        data_1_V_read,
        data_2_V_read,
        data_3_V_read,
        data_4_V_read,
        data_5_V_read,
        data_6_V_read,
        data_7_V_read,
        data_8_V_read,
        data_9_V_read,
        data_10_V_read,
        data_11_V_read,
        data_12_V_read,
        data_13_V_read,
        data_14_V_read,
        data_15_V_read,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [15:0] data_0_V_read;
input  [15:0] data_1_V_read;
input  [15:0] data_2_V_read;
input  [15:0] data_3_V_read;
input  [15:0] data_4_V_read;
input  [15:0] data_5_V_read;
input  [15:0] data_6_V_read;
input  [15:0] data_7_V_read;
input  [15:0] data_8_V_read;
input  [15:0] data_9_V_read;
input  [15:0] data_10_V_read;
input  [15:0] data_11_V_read;
input  [15:0] data_12_V_read;
input  [15:0] data_13_V_read;
input  [15:0] data_14_V_read;
input  [15:0] data_15_V_read;
output  [15:0] ap_return;
input   ap_ce;

reg[15:0] ap_return;

reg   [15:0] tmp_5_reg_1670;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [15:0] tmp_5_1_reg_1675;
reg   [15:0] tmp_5_2_reg_1680;
reg   [15:0] tmp_5_3_reg_1685;
reg   [15:0] tmp_5_4_reg_1690;
reg   [15:0] tmp_5_5_reg_1695;
reg   [15:0] tmp_5_6_reg_1700;
reg   [15:0] tmp_5_7_reg_1705;
reg   [15:0] tmp_5_8_reg_1710;
reg   [15:0] tmp_5_9_reg_1715;
reg   [15:0] tmp_5_s_reg_1720;
reg   [15:0] tmp_5_10_reg_1725;
reg   [14:0] tmp_6_reg_1730;
reg   [15:0] tmp_5_11_reg_1735;
reg   [14:0] tmp_9_reg_1740;
reg   [15:0] tmp_5_12_reg_1745;
wire   [15:0] tmp1_fu_1601_p2;
reg   [15:0] tmp1_reg_1750;
wire   [15:0] tmp4_fu_1615_p2;
reg   [15:0] tmp4_reg_1755;
wire   [15:0] tmp9_fu_1621_p2;
reg   [15:0] tmp9_reg_1760;
wire   [15:0] tmp10_fu_1625_p2;
reg   [15:0] tmp10_reg_1765;
wire   [15:0] tmp11_fu_1645_p2;
reg   [15:0] tmp11_reg_1770;
wire  signed [15:0] r_V_6_14_fu_194_p0;
wire    ap_block_pp0_stage0;
wire  signed [15:0] r_V_6_fu_195_p0;
wire  signed [15:0] r_V_6_9_fu_196_p0;
wire  signed [15:0] r_V_6_4_fu_197_p0;
wire  signed [15:0] r_V_6_5_fu_198_p0;
wire  signed [15:0] r_V_6_1_fu_199_p0;
wire  signed [15:0] r_V_6_6_fu_200_p0;
wire  signed [15:0] r_V_6_10_fu_201_p0;
wire  signed [15:0] r_V_6_3_fu_202_p0;
wire  signed [15:0] r_V_6_8_fu_203_p0;
wire  signed [15:0] r_V_6_s_fu_204_p0;
wire  signed [15:0] r_V_6_11_fu_205_p0;
wire  signed [15:0] r_V_6_7_fu_206_p0;
wire  signed [15:0] r_V_6_12_fu_207_p0;
wire  signed [15:0] r_V_6_13_fu_208_p0;
wire  signed [15:0] r_V_6_2_fu_209_p0;
wire   [25:0] r_V_6_fu_195_p2;
wire   [25:0] r_V_6_1_fu_199_p2;
wire   [25:0] r_V_6_2_fu_209_p2;
wire   [25:0] r_V_6_3_fu_202_p2;
wire   [25:0] r_V_6_4_fu_197_p2;
wire   [25:0] r_V_6_5_fu_198_p2;
wire   [25:0] r_V_6_6_fu_200_p2;
wire   [25:0] r_V_6_7_fu_206_p2;
wire   [25:0] r_V_6_8_fu_203_p2;
wire   [25:0] r_V_6_9_fu_196_p2;
wire   [25:0] r_V_6_s_fu_204_p2;
wire   [25:0] r_V_6_10_fu_201_p2;
wire   [24:0] r_V_6_11_fu_205_p2;
wire   [25:0] r_V_6_12_fu_207_p2;
wire   [24:0] r_V_6_13_fu_208_p2;
wire   [25:0] r_V_6_14_fu_194_p2;
wire   [15:0] tmp3_fu_1597_p2;
wire   [15:0] tmp2_fu_1593_p2;
wire   [15:0] tmp6_fu_1611_p2;
wire   [15:0] tmp5_fu_1607_p2;
wire  signed [15:0] tmp_7_fu_1587_p1;
wire   [15:0] tmp14_fu_1634_p2;
wire  signed [15:0] tmp_s_fu_1590_p1;
wire   [15:0] tmp13_fu_1639_p2;
wire   [15:0] tmp12_fu_1629_p2;
wire   [15:0] tmp8_fu_1655_p2;
wire   [15:0] tmp7_fu_1659_p2;
wire   [15:0] tmp_fu_1651_p2;
wire   [15:0] res_V_write_assign_fu_1664_p2;
reg    ap_ce_reg;
reg   [15:0] data_0_V_read_int_reg;
reg   [15:0] data_1_V_read_int_reg;
reg   [15:0] data_2_V_read_int_reg;
reg   [15:0] data_3_V_read_int_reg;
reg   [15:0] data_4_V_read_int_reg;
reg   [15:0] data_5_V_read_int_reg;
reg   [15:0] data_6_V_read_int_reg;
reg   [15:0] data_7_V_read_int_reg;
reg   [15:0] data_8_V_read_int_reg;
reg   [15:0] data_9_V_read_int_reg;
reg   [15:0] data_10_V_read_int_reg;
reg   [15:0] data_11_V_read_int_reg;
reg   [15:0] data_12_V_read_int_reg;
reg   [15:0] data_13_V_read_int_reg;
reg   [15:0] data_14_V_read_int_reg;
reg   [15:0] data_15_V_read_int_reg;
reg   [15:0] ap_return_int_reg;

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= res_V_write_assign_fu_1664_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        data_0_V_read_int_reg <= data_0_V_read;
        data_10_V_read_int_reg <= data_10_V_read;
        data_11_V_read_int_reg <= data_11_V_read;
        data_12_V_read_int_reg <= data_12_V_read;
        data_13_V_read_int_reg <= data_13_V_read;
        data_14_V_read_int_reg <= data_14_V_read;
        data_15_V_read_int_reg <= data_15_V_read;
        data_1_V_read_int_reg <= data_1_V_read;
        data_2_V_read_int_reg <= data_2_V_read;
        data_3_V_read_int_reg <= data_3_V_read;
        data_4_V_read_int_reg <= data_4_V_read;
        data_5_V_read_int_reg <= data_5_V_read;
        data_6_V_read_int_reg <= data_6_V_read;
        data_7_V_read_int_reg <= data_7_V_read;
        data_8_V_read_int_reg <= data_8_V_read;
        data_9_V_read_int_reg <= data_9_V_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp10_reg_1765 <= tmp10_fu_1625_p2;
        tmp11_reg_1770 <= tmp11_fu_1645_p2;
        tmp1_reg_1750 <= tmp1_fu_1601_p2;
        tmp4_reg_1755 <= tmp4_fu_1615_p2;
        tmp9_reg_1760 <= tmp9_fu_1621_p2;
        tmp_5_10_reg_1725 <= {{r_V_6_10_fu_201_p2[25:10]}};
        tmp_5_11_reg_1735 <= {{r_V_6_12_fu_207_p2[25:10]}};
        tmp_5_12_reg_1745 <= {{r_V_6_14_fu_194_p2[25:10]}};
        tmp_5_1_reg_1675 <= {{r_V_6_1_fu_199_p2[25:10]}};
        tmp_5_2_reg_1680 <= {{r_V_6_2_fu_209_p2[25:10]}};
        tmp_5_3_reg_1685 <= {{r_V_6_3_fu_202_p2[25:10]}};
        tmp_5_4_reg_1690 <= {{r_V_6_4_fu_197_p2[25:10]}};
        tmp_5_5_reg_1695 <= {{r_V_6_5_fu_198_p2[25:10]}};
        tmp_5_6_reg_1700 <= {{r_V_6_6_fu_200_p2[25:10]}};
        tmp_5_7_reg_1705 <= {{r_V_6_7_fu_206_p2[25:10]}};
        tmp_5_8_reg_1710 <= {{r_V_6_8_fu_203_p2[25:10]}};
        tmp_5_9_reg_1715 <= {{r_V_6_9_fu_196_p2[25:10]}};
        tmp_5_reg_1670 <= {{r_V_6_fu_195_p2[25:10]}};
        tmp_5_s_reg_1720 <= {{r_V_6_s_fu_204_p2[25:10]}};
        tmp_6_reg_1730 <= {{r_V_6_11_fu_205_p2[24:10]}};
        tmp_9_reg_1740 <= {{r_V_6_13_fu_208_p2[24:10]}};
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = res_V_write_assign_fu_1664_p2;
    end
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign r_V_6_10_fu_201_p0 = data_11_V_read_int_reg;

assign r_V_6_10_fu_201_p2 = ($signed(r_V_6_10_fu_201_p0) * $signed('h19C));

assign r_V_6_11_fu_205_p0 = data_12_V_read_int_reg;

assign r_V_6_11_fu_205_p2 = ($signed(r_V_6_11_fu_205_p0) * $signed(-'hC2));

assign r_V_6_12_fu_207_p0 = data_13_V_read_int_reg;

assign r_V_6_12_fu_207_p2 = ($signed(r_V_6_12_fu_207_p0) * $signed(-'h16C));

assign r_V_6_13_fu_208_p0 = data_14_V_read_int_reg;

assign r_V_6_13_fu_208_p2 = ($signed(r_V_6_13_fu_208_p0) * $signed('hAE));

assign r_V_6_14_fu_194_p0 = data_15_V_read_int_reg;

assign r_V_6_14_fu_194_p2 = ($signed(r_V_6_14_fu_194_p0) * $signed('h184));

assign r_V_6_1_fu_199_p0 = data_1_V_read_int_reg;

assign r_V_6_1_fu_199_p2 = ($signed(r_V_6_1_fu_199_p0) * $signed(-'h153));

assign r_V_6_2_fu_209_p0 = data_2_V_read_int_reg;

assign r_V_6_2_fu_209_p2 = ($signed(r_V_6_2_fu_209_p0) * $signed('h124));

assign r_V_6_3_fu_202_p0 = data_3_V_read_int_reg;

assign r_V_6_3_fu_202_p2 = ($signed(r_V_6_3_fu_202_p0) * $signed('h185));

assign r_V_6_4_fu_197_p0 = data_4_V_read_int_reg;

assign r_V_6_4_fu_197_p2 = ($signed(r_V_6_4_fu_197_p0) * $signed('h152));

assign r_V_6_5_fu_198_p0 = data_5_V_read_int_reg;

assign r_V_6_5_fu_198_p2 = ($signed(r_V_6_5_fu_198_p0) * $signed('h162));

assign r_V_6_6_fu_200_p0 = data_6_V_read_int_reg;

assign r_V_6_6_fu_200_p2 = ($signed(r_V_6_6_fu_200_p0) * $signed('h132));

assign r_V_6_7_fu_206_p0 = data_7_V_read_int_reg;

assign r_V_6_7_fu_206_p2 = ($signed(r_V_6_7_fu_206_p0) * $signed('h1B8));

assign r_V_6_8_fu_203_p0 = data_8_V_read_int_reg;

assign r_V_6_8_fu_203_p2 = ($signed(r_V_6_8_fu_203_p0) * $signed(-'h128));

assign r_V_6_9_fu_196_p0 = data_9_V_read_int_reg;

assign r_V_6_9_fu_196_p2 = ($signed(r_V_6_9_fu_196_p0) * $signed('h12B));

assign r_V_6_fu_195_p0 = data_0_V_read_int_reg;

assign r_V_6_fu_195_p2 = ($signed(r_V_6_fu_195_p0) * $signed(-'h169));

assign r_V_6_s_fu_204_p0 = data_10_V_read_int_reg;

assign r_V_6_s_fu_204_p2 = ($signed(r_V_6_s_fu_204_p0) * $signed(-'h124));

assign res_V_write_assign_fu_1664_p2 = (tmp7_fu_1659_p2 + tmp_fu_1651_p2);

assign tmp10_fu_1625_p2 = (tmp_5_s_reg_1720 + tmp_5_10_reg_1725);

assign tmp11_fu_1645_p2 = (tmp13_fu_1639_p2 + tmp12_fu_1629_p2);

assign tmp12_fu_1629_p2 = ($signed(tmp_7_fu_1587_p1) + $signed(tmp_5_11_reg_1735));

assign tmp13_fu_1639_p2 = ($signed(tmp14_fu_1634_p2) + $signed(tmp_s_fu_1590_p1));

assign tmp14_fu_1634_p2 = ($signed(tmp_5_12_reg_1745) + $signed(16'd65413));

assign tmp1_fu_1601_p2 = (tmp3_fu_1597_p2 + tmp2_fu_1593_p2);

assign tmp2_fu_1593_p2 = (tmp_5_reg_1670 + tmp_5_1_reg_1675);

assign tmp3_fu_1597_p2 = (tmp_5_2_reg_1680 + tmp_5_3_reg_1685);

assign tmp4_fu_1615_p2 = (tmp6_fu_1611_p2 + tmp5_fu_1607_p2);

assign tmp5_fu_1607_p2 = (tmp_5_4_reg_1690 + tmp_5_5_reg_1695);

assign tmp6_fu_1611_p2 = (tmp_5_6_reg_1700 + tmp_5_7_reg_1705);

assign tmp7_fu_1659_p2 = (tmp11_reg_1770 + tmp8_fu_1655_p2);

assign tmp8_fu_1655_p2 = (tmp10_reg_1765 + tmp9_reg_1760);

assign tmp9_fu_1621_p2 = (tmp_5_8_reg_1710 + tmp_5_9_reg_1715);

assign tmp_7_fu_1587_p1 = $signed(tmp_6_reg_1730);

assign tmp_fu_1651_p2 = (tmp4_reg_1755 + tmp1_reg_1750);

assign tmp_s_fu_1590_p1 = $signed(tmp_9_reg_1740);

endmodule //dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_0_0

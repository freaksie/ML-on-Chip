// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_latency_ap_fixed_ap_fixed_18_6_5_3_0_config2_0_0_0_0_0_0_0_0_0 (
        ap_clk,
        ap_rst,
        data_V_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [35:0] data_V_read;
output  [17:0] ap_return_0;
output  [17:0] ap_return_1;
output  [17:0] ap_return_2;
output  [17:0] ap_return_3;
output  [17:0] ap_return_4;
output  [17:0] ap_return_5;
output  [17:0] ap_return_6;
output  [17:0] ap_return_7;
input   ap_ce;

reg[17:0] ap_return_0;
reg[17:0] ap_return_1;
reg[17:0] ap_return_2;
reg[17:0] ap_return_3;
reg[17:0] ap_return_4;
reg[17:0] ap_return_5;
reg[17:0] ap_return_6;
reg[17:0] ap_return_7;

reg   [17:0] tmp_3_reg_1517;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [17:0] tmp_33_0_1_reg_1522;
reg   [16:0] tmp_s_reg_1527;
reg   [17:0] tmp_33_0_3_reg_1532;
reg   [8:0] tmp_18_reg_1537;
reg   [17:0] tmp_33_0_5_reg_1542;
reg   [17:0] tmp_33_0_6_reg_1547;
reg   [17:0] tmp_33_0_7_reg_1552;
reg   [17:0] tmp_33_1_reg_1557;
reg   [17:0] tmp_33_1_1_reg_1562;
reg   [17:0] tmp_33_1_2_reg_1567;
reg   [17:0] tmp_33_1_3_reg_1572;
reg   [17:0] tmp_33_1_4_reg_1577;
reg   [15:0] tmp_20_reg_1582;
reg   [17:0] tmp_33_1_6_reg_1587;
reg   [17:0] tmp_33_1_7_reg_1592;
wire  signed [17:0] r_V_10_1_4_fu_92_p1;
wire  signed [29:0] r_V_1_cast_fu_1310_p1;
wire    ap_block_pp0_stage0;
wire  signed [17:0] r_V_10_1_1_fu_93_p1;
wire  signed [17:0] r_V_10_0_3_fu_95_p1;
wire  signed [29:0] r_V_cast_fu_1187_p1;
wire  signed [17:0] r_V_10_0_7_fu_96_p1;
wire  signed [17:0] r_V_10_0_5_fu_97_p1;
wire  signed [17:0] r_V_10_0_1_fu_98_p1;
wire  signed [17:0] r_V_10_0_6_fu_99_p1;
wire  signed [17:0] r_V_10_1_3_fu_100_p1;
wire  signed [17:0] r_V_10_0_2_fu_101_p1;
wire  signed [17:0] r_V_10_1_fu_102_p1;
wire  signed [17:0] r_V_10_1_2_fu_103_p1;
wire  signed [17:0] r_V_s_fu_104_p1;
wire  signed [17:0] r_V_10_1_6_fu_105_p1;
wire  signed [17:0] r_V_10_1_7_fu_106_p1;
wire  signed [17:0] r_V_10_1_5_fu_107_p1;
wire  signed [17:0] tmp_fu_1174_p1;
wire   [29:0] r_V_s_fu_104_p2;
wire   [29:0] r_V_10_0_1_fu_98_p2;
wire   [28:0] r_V_10_0_2_fu_101_p2;
wire   [29:0] r_V_10_0_3_fu_95_p2;
wire   [19:0] tmp_22_fu_1237_p3;
wire  signed [20:0] r_V_cast7_fu_1178_p1;
wire  signed [20:0] p_shl_fu_1245_p1;
wire   [20:0] r_V_10_0_4_fu_1249_p2;
wire   [29:0] r_V_10_0_5_fu_97_p2;
wire   [29:0] r_V_10_0_6_fu_99_p2;
wire   [29:0] r_V_10_0_7_fu_96_p2;
wire  signed [17:0] tmp_2_fu_1295_p4;
wire   [29:0] r_V_10_1_fu_102_p2;
wire   [29:0] r_V_10_1_1_fu_93_p2;
wire   [29:0] r_V_10_1_2_fu_103_p2;
wire   [29:0] r_V_10_1_3_fu_100_p2;
wire   [29:0] r_V_10_1_4_fu_92_p2;
wire   [27:0] r_V_10_1_5_fu_107_p2;
wire   [29:0] r_V_10_1_6_fu_105_p2;
wire   [29:0] r_V_10_1_7_fu_106_p2;
wire   [17:0] tmp1_fu_1410_p2;
wire   [17:0] tmp2_fu_1420_p2;
wire  signed [17:0] tmp_17_fu_1401_p1;
wire  signed [17:0] tmp_19_fu_1404_p1;
wire  signed [17:0] tmp_21_fu_1407_p1;
wire   [17:0] tmp3_fu_1449_p2;
wire   [17:0] tmp4_fu_1459_p2;
wire   [17:0] res_0_V_write_assign_fu_1415_p2;
wire   [17:0] acc_1_V_fu_1425_p2;
wire   [17:0] acc_2_V_fu_1430_p2;
wire   [17:0] acc_3_V_fu_1435_p2;
wire   [17:0] acc_4_V_fu_1439_p2;
wire   [17:0] acc_5_V_fu_1444_p2;
wire   [17:0] acc_6_V_fu_1454_p2;
wire   [17:0] acc_7_V_fu_1464_p2;
reg    ap_ce_reg;
reg   [17:0] ap_return_0_int_reg;
reg   [17:0] ap_return_1_int_reg;
reg   [17:0] ap_return_2_int_reg;
reg   [17:0] ap_return_3_int_reg;
reg   [17:0] ap_return_4_int_reg;
reg   [17:0] ap_return_5_int_reg;
reg   [17:0] ap_return_6_int_reg;
reg   [17:0] ap_return_7_int_reg;

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_0_int_reg <= res_0_V_write_assign_fu_1415_p2;
        ap_return_1_int_reg <= acc_1_V_fu_1425_p2;
        ap_return_2_int_reg <= acc_2_V_fu_1430_p2;
        ap_return_3_int_reg <= acc_3_V_fu_1435_p2;
        ap_return_4_int_reg <= acc_4_V_fu_1439_p2;
        ap_return_5_int_reg <= acc_5_V_fu_1444_p2;
        ap_return_6_int_reg <= acc_6_V_fu_1454_p2;
        ap_return_7_int_reg <= acc_7_V_fu_1464_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_18_reg_1537 <= {{r_V_10_0_4_fu_1249_p2[20:12]}};
        tmp_20_reg_1582 <= {{r_V_10_1_5_fu_107_p2[27:12]}};
        tmp_33_0_1_reg_1522 <= {{r_V_10_0_1_fu_98_p2[29:12]}};
        tmp_33_0_3_reg_1532 <= {{r_V_10_0_3_fu_95_p2[29:12]}};
        tmp_33_0_5_reg_1542 <= {{r_V_10_0_5_fu_97_p2[29:12]}};
        tmp_33_0_6_reg_1547 <= {{r_V_10_0_6_fu_99_p2[29:12]}};
        tmp_33_0_7_reg_1552 <= {{r_V_10_0_7_fu_96_p2[29:12]}};
        tmp_33_1_1_reg_1562 <= {{r_V_10_1_1_fu_93_p2[29:12]}};
        tmp_33_1_2_reg_1567 <= {{r_V_10_1_2_fu_103_p2[29:12]}};
        tmp_33_1_3_reg_1572 <= {{r_V_10_1_3_fu_100_p2[29:12]}};
        tmp_33_1_4_reg_1577 <= {{r_V_10_1_4_fu_92_p2[29:12]}};
        tmp_33_1_6_reg_1587 <= {{r_V_10_1_6_fu_105_p2[29:12]}};
        tmp_33_1_7_reg_1592 <= {{r_V_10_1_7_fu_106_p2[29:12]}};
        tmp_33_1_reg_1557 <= {{r_V_10_1_fu_102_p2[29:12]}};
        tmp_3_reg_1517 <= {{r_V_s_fu_104_p2[29:12]}};
        tmp_s_reg_1527 <= {{r_V_10_0_2_fu_101_p2[28:12]}};
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_0 = ap_return_0_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_0 = res_0_V_write_assign_fu_1415_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_1 = ap_return_1_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_1 = acc_1_V_fu_1425_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_2 = ap_return_2_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_2 = acc_2_V_fu_1430_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_3 = ap_return_3_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_3 = acc_3_V_fu_1435_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_4 = ap_return_4_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_4 = acc_4_V_fu_1439_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_5 = ap_return_5_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_5 = acc_5_V_fu_1444_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_6 = ap_return_6_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_6 = acc_6_V_fu_1454_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_7 = ap_return_7_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_7 = acc_7_V_fu_1464_p2;
    end
end

assign acc_1_V_fu_1425_p2 = (tmp_33_0_1_reg_1522 + tmp2_fu_1420_p2);

assign acc_2_V_fu_1430_p2 = ($signed(tmp_17_fu_1401_p1) + $signed(tmp_33_1_2_reg_1567));

assign acc_3_V_fu_1435_p2 = (tmp_33_0_3_reg_1532 + tmp_33_1_3_reg_1572);

assign acc_4_V_fu_1439_p2 = ($signed(tmp_19_fu_1404_p1) + $signed(tmp_33_1_4_reg_1577));

assign acc_5_V_fu_1444_p2 = ($signed(tmp_33_0_5_reg_1542) + $signed(tmp_21_fu_1407_p1));

assign acc_6_V_fu_1454_p2 = (tmp_33_0_6_reg_1547 + tmp3_fu_1449_p2);

assign acc_7_V_fu_1464_p2 = (tmp_33_0_7_reg_1552 + tmp4_fu_1459_p2);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign p_shl_fu_1245_p1 = $signed(tmp_22_fu_1237_p3);

assign r_V_10_0_1_fu_98_p1 = r_V_cast_fu_1187_p1;

assign r_V_10_0_1_fu_98_p2 = ($signed({{1'b0}, {30'd4863}}) * $signed(r_V_10_0_1_fu_98_p1));

assign r_V_10_0_2_fu_101_p1 = tmp_fu_1174_p1;

assign r_V_10_0_2_fu_101_p2 = ($signed(29'd536870102) * $signed(r_V_10_0_2_fu_101_p1));

assign r_V_10_0_3_fu_95_p1 = r_V_cast_fu_1187_p1;

assign r_V_10_0_3_fu_95_p2 = ($signed(30'd1073740390) * $signed(r_V_10_0_3_fu_95_p1));

assign r_V_10_0_4_fu_1249_p2 = ($signed(r_V_cast7_fu_1178_p1) - $signed(p_shl_fu_1245_p1));

assign r_V_10_0_5_fu_97_p1 = r_V_cast_fu_1187_p1;

assign r_V_10_0_5_fu_97_p2 = ($signed(30'd1073739618) * $signed(r_V_10_0_5_fu_97_p1));

assign r_V_10_0_6_fu_99_p1 = r_V_cast_fu_1187_p1;

assign r_V_10_0_6_fu_99_p2 = ($signed({{1'b0}, {30'd4215}}) * $signed(r_V_10_0_6_fu_99_p1));

assign r_V_10_0_7_fu_96_p1 = r_V_cast_fu_1187_p1;

assign r_V_10_0_7_fu_96_p2 = ($signed({{1'b0}, {30'd4896}}) * $signed(r_V_10_0_7_fu_96_p1));

assign r_V_10_1_1_fu_93_p1 = r_V_1_cast_fu_1310_p1;

assign r_V_10_1_1_fu_93_p2 = ($signed({{1'b0}, {30'd4406}}) * $signed(r_V_10_1_1_fu_93_p1));

assign r_V_10_1_2_fu_103_p1 = r_V_1_cast_fu_1310_p1;

assign r_V_10_1_2_fu_103_p2 = ($signed(30'd1073738874) * $signed(r_V_10_1_2_fu_103_p1));

assign r_V_10_1_3_fu_100_p1 = r_V_1_cast_fu_1310_p1;

assign r_V_10_1_3_fu_100_p2 = ($signed(30'd1073740289) * $signed(r_V_10_1_3_fu_100_p1));

assign r_V_10_1_4_fu_92_p1 = r_V_1_cast_fu_1310_p1;

assign r_V_10_1_4_fu_92_p2 = ($signed(30'd1073740560) * $signed(r_V_10_1_4_fu_92_p1));

assign r_V_10_1_5_fu_107_p1 = tmp_2_fu_1295_p4;

assign r_V_10_1_5_fu_107_p2 = ($signed(28'd268435195) * $signed(r_V_10_1_5_fu_107_p1));

assign r_V_10_1_6_fu_105_p1 = r_V_1_cast_fu_1310_p1;

assign r_V_10_1_6_fu_105_p2 = ($signed({{1'b0}, {30'd3074}}) * $signed(r_V_10_1_6_fu_105_p1));

assign r_V_10_1_7_fu_106_p1 = r_V_1_cast_fu_1310_p1;

assign r_V_10_1_7_fu_106_p2 = ($signed({{1'b0}, {30'd2107}}) * $signed(r_V_10_1_7_fu_106_p1));

assign r_V_10_1_fu_102_p1 = r_V_1_cast_fu_1310_p1;

assign r_V_10_1_fu_102_p2 = ($signed({{1'b0}, {30'd1258}}) * $signed(r_V_10_1_fu_102_p1));

assign r_V_1_cast_fu_1310_p1 = tmp_2_fu_1295_p4;

assign r_V_cast7_fu_1178_p1 = tmp_fu_1174_p1;

assign r_V_cast_fu_1187_p1 = tmp_fu_1174_p1;

assign r_V_s_fu_104_p1 = r_V_cast_fu_1187_p1;

assign r_V_s_fu_104_p2 = ($signed(30'd1073739863) * $signed(r_V_s_fu_104_p1));

assign res_0_V_write_assign_fu_1415_p2 = (tmp_3_reg_1517 + tmp1_fu_1410_p2);

assign tmp1_fu_1410_p2 = ($signed(18'd262042) + $signed(tmp_33_1_reg_1557));

assign tmp2_fu_1420_p2 = ($signed(18'd259229) + $signed(tmp_33_1_1_reg_1562));

assign tmp3_fu_1449_p2 = ($signed(18'd258998) + $signed(tmp_33_1_6_reg_1587));

assign tmp4_fu_1459_p2 = ($signed(18'd259290) + $signed(tmp_33_1_7_reg_1592));

assign tmp_17_fu_1401_p1 = $signed(tmp_s_reg_1527);

assign tmp_19_fu_1404_p1 = $signed(tmp_18_reg_1537);

assign tmp_21_fu_1407_p1 = $signed(tmp_20_reg_1582);

assign tmp_22_fu_1237_p3 = {{tmp_fu_1174_p1}, {2'd0}};

assign tmp_2_fu_1295_p4 = {{data_V_read[35:18]}};

assign tmp_fu_1174_p1 = data_V_read[17:0];

endmodule //dense_latency_ap_fixed_ap_fixed_18_6_5_3_0_config2_0_0_0_0_0_0_0_0_0

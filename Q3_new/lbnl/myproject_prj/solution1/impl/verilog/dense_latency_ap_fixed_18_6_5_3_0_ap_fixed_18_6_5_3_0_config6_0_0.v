// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_latency_ap_fixed_18_6_5_3_0_ap_fixed_18_6_5_3_0_config6_0_0 (
        ap_clk,
        ap_rst,
        data_0_V_read,
        data_1_V_read,
        data_2_V_read,
        data_3_V_read,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [17:0] data_0_V_read;
input  [17:0] data_1_V_read;
input  [17:0] data_2_V_read;
input  [17:0] data_3_V_read;
output  [17:0] ap_return;
input   ap_ce;

reg[17:0] ap_return;

reg   [17:0] data_2_V_read_3_reg_258;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [17:0] tmp_5_reg_264;
reg   [17:0] tmp_5_1_reg_269;
reg   [17:0] tmp_5_3_reg_274;
wire  signed [17:0] r_V_6_fu_78_p0;
wire    ap_block_pp0_stage0;
wire  signed [17:0] r_V_6_1_fu_80_p0;
wire  signed [17:0] r_V_6_3_fu_81_p0;
wire   [29:0] r_V_6_fu_78_p2;
wire   [29:0] r_V_6_1_fu_80_p2;
wire   [29:0] r_V_6_3_fu_81_p2;
wire   [29:0] p_shl_fu_197_p3;
wire   [22:0] p_shl1_fu_210_p3;
wire   [29:0] p_neg_fu_204_p2;
wire  signed [29:0] p_shl1_cast_fu_217_p1;
wire   [29:0] r_V_6_2_fu_221_p2;
wire   [17:0] tmp_5_2_fu_227_p4;
wire   [17:0] tmp3_fu_241_p2;
wire   [17:0] tmp_fu_237_p2;
wire   [17:0] tmp2_fu_246_p2;
wire   [17:0] res_V_write_assign_fu_252_p2;
reg    ap_ce_reg;
reg   [17:0] ap_return_int_reg;

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= res_V_write_assign_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        data_2_V_read_3_reg_258 <= data_2_V_read;
        tmp_5_1_reg_269 <= {{r_V_6_1_fu_80_p2[29:12]}};
        tmp_5_3_reg_274 <= {{r_V_6_3_fu_81_p2[29:12]}};
        tmp_5_reg_264 <= {{r_V_6_fu_78_p2[29:12]}};
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = res_V_write_assign_fu_252_p2;
    end
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign p_neg_fu_204_p2 = (30'd0 - p_shl_fu_197_p3);

assign p_shl1_cast_fu_217_p1 = $signed(p_shl1_fu_210_p3);

assign p_shl1_fu_210_p3 = {{data_2_V_read_3_reg_258}, {5'd0}};

assign p_shl_fu_197_p3 = {{data_2_V_read_3_reg_258}, {12'd0}};

assign r_V_6_1_fu_80_p0 = data_1_V_read;

assign r_V_6_1_fu_80_p2 = ($signed(r_V_6_1_fu_80_p0) * $signed(-'h3822));

assign r_V_6_2_fu_221_p2 = ($signed(p_neg_fu_204_p2) - $signed(p_shl1_cast_fu_217_p1));

assign r_V_6_3_fu_81_p0 = data_3_V_read;

assign r_V_6_3_fu_81_p2 = ($signed(r_V_6_3_fu_81_p0) * $signed(-'h346D));

assign r_V_6_fu_78_p0 = data_0_V_read;

assign r_V_6_fu_78_p2 = ($signed(r_V_6_fu_78_p0) * $signed('hCE3));

assign res_V_write_assign_fu_252_p2 = (tmp_fu_237_p2 + tmp2_fu_246_p2);

assign tmp2_fu_246_p2 = (tmp_5_2_fu_227_p4 + tmp3_fu_241_p2);

assign tmp3_fu_241_p2 = (tmp_5_3_reg_274 + 18'd22860);

assign tmp_5_2_fu_227_p4 = {{r_V_6_2_fu_221_p2[29:12]}};

assign tmp_fu_237_p2 = (tmp_5_1_reg_269 + tmp_5_reg_264);

endmodule //dense_latency_ap_fixed_18_6_5_3_0_ap_fixed_18_6_5_3_0_config6_0_0

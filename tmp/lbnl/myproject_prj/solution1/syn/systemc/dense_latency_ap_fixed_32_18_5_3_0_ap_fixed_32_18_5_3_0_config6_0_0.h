// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dense_latency_ap_fixed_32_18_5_3_0_ap_fixed_32_18_5_3_0_config6_0_0_HH_
#define _dense_latency_ap_fixed_32_18_5_3_0_ap_fixed_32_18_5_3_0_config6_0_0_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "myproject_mul_32s_15ns_46_3_0.h"
#include "myproject_mul_32s_15s_46_3_0.h"
#include "myproject_mul_32s_14s_46_3_0.h"

namespace ap_rtl {

struct dense_latency_ap_fixed_32_18_5_3_0_ap_fixed_32_18_5_3_0_config6_0_0 : public sc_module {
    // Port declarations 8
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<32> > data_0_V_read;
    sc_in< sc_lv<32> > data_1_V_read;
    sc_in< sc_lv<32> > data_2_V_read;
    sc_in< sc_lv<32> > data_3_V_read;
    sc_out< sc_lv<32> > ap_return;
    sc_in< sc_logic > ap_ce;


    // Module declarations
    dense_latency_ap_fixed_32_18_5_3_0_ap_fixed_32_18_5_3_0_config6_0_0(sc_module_name name);
    SC_HAS_PROCESS(dense_latency_ap_fixed_32_18_5_3_0_ap_fixed_32_18_5_3_0_config6_0_0);

    ~dense_latency_ap_fixed_32_18_5_3_0_ap_fixed_32_18_5_3_0_config6_0_0();

    sc_trace_file* mVcdFile;

    myproject_mul_32s_15ns_46_3_0<1,3,32,15,46>* myproject_mul_32s_15ns_46_3_0_U87;
    myproject_mul_32s_15s_46_3_0<1,3,32,15,46>* myproject_mul_32s_15s_46_3_0_U88;
    myproject_mul_32s_14s_46_3_0<1,3,32,14,46>* myproject_mul_32s_14s_46_3_0_U89;
    myproject_mul_32s_15s_46_3_0<1,3,32,15,46>* myproject_mul_32s_15s_46_3_0_U90;
    sc_signal< sc_lv<32> > data_1_V_read_3_reg_228;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter4;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<32> > data_0_V_read_3_reg_233;
    sc_signal< sc_lv<32> > tmp_5_2_reg_258;
    sc_signal< sc_lv<32> > tmp_5_3_reg_263;
    sc_signal< sc_lv<32> > tmp_5_reg_268;
    sc_signal< sc_lv<32> > tmp_5_1_reg_273;
    sc_signal< sc_lv<32> > tmp1_fu_214_p2;
    sc_signal< sc_lv<32> > tmp1_reg_278;
    sc_signal< sc_lv<15> > grp_fu_70_p1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<15> > grp_fu_71_p1;
    sc_signal< sc_lv<14> > grp_fu_72_p1;
    sc_signal< sc_lv<15> > grp_fu_73_p1;
    sc_signal< sc_lv<46> > grp_fu_70_p2;
    sc_signal< sc_lv<46> > grp_fu_73_p2;
    sc_signal< sc_lv<46> > grp_fu_71_p2;
    sc_signal< sc_lv<46> > grp_fu_72_p2;
    sc_signal< sc_lv<32> > tmp2_fu_209_p2;
    sc_signal< sc_lv<32> > tmp_fu_219_p2;
    sc_signal< sc_logic > grp_fu_70_ce;
    sc_signal< sc_logic > grp_fu_71_ce;
    sc_signal< sc_logic > grp_fu_72_ce;
    sc_signal< sc_logic > grp_fu_73_ce;
    sc_signal< sc_lv<32> > res_V_write_assign_fu_223_p2;
    sc_signal< sc_logic > ap_ce_reg;
    sc_signal< sc_lv<32> > data_0_V_read_int_reg;
    sc_signal< sc_lv<32> > data_1_V_read_int_reg;
    sc_signal< sc_lv<32> > data_2_V_read_int_reg;
    sc_signal< sc_lv<32> > data_3_V_read_int_reg;
    sc_signal< sc_lv<32> > ap_return_int_reg;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<46> ap_const_lv46_38F1;
    static const sc_lv<46> ap_const_lv46_3FFFFFFFD368;
    static const sc_lv<46> ap_const_lv46_3FFFFFFFE73A;
    static const sc_lv<46> ap_const_lv46_3FFFFFFFCBAE;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_2D;
    static const sc_lv<32> ap_const_lv32_14DD;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_block_state4_pp0_stage0_iter3();
    void thread_ap_block_state5_pp0_stage0_iter4();
    void thread_ap_return();
    void thread_grp_fu_70_ce();
    void thread_grp_fu_70_p1();
    void thread_grp_fu_71_ce();
    void thread_grp_fu_71_p1();
    void thread_grp_fu_72_ce();
    void thread_grp_fu_72_p1();
    void thread_grp_fu_73_ce();
    void thread_grp_fu_73_p1();
    void thread_res_V_write_assign_fu_223_p2();
    void thread_tmp1_fu_214_p2();
    void thread_tmp2_fu_209_p2();
    void thread_tmp_fu_219_p2();
};

}

using namespace ap_rtl;

#endif

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_latency_ap_fixed_ap_fixed_18_4_5_3_0_config2_0_0_0_0_0_0_0_0_0 (
        ap_clk,
        ap_rst,
        data_V_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [63:0] data_V_read;
output  [17:0] ap_return_0;
output  [17:0] ap_return_1;
output  [17:0] ap_return_2;
output  [17:0] ap_return_3;
output  [17:0] ap_return_4;
output  [17:0] ap_return_5;
output  [17:0] ap_return_6;
output  [17:0] ap_return_7;
input   ap_ce;

reg[17:0] ap_return_0;
reg[17:0] ap_return_1;
reg[17:0] ap_return_2;
reg[17:0] ap_return_3;
reg[17:0] ap_return_4;
reg[17:0] ap_return_5;
reg[17:0] ap_return_6;
reg[17:0] ap_return_7;

wire   [17:0] r_V_6_fu_81_p2;
reg   [17:0] r_V_6_reg_1184;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [17:0] r_V_6_0_1_fu_85_p2;
reg   [17:0] r_V_6_0_1_reg_1188;
wire   [17:0] r_V_6_0_2_fu_95_p2;
reg   [17:0] r_V_6_0_2_reg_1192;
wire   [17:0] r_V_6_0_3_fu_88_p2;
reg   [17:0] r_V_6_0_3_reg_1196;
wire   [17:0] r_V_6_0_4_fu_83_p2;
reg   [17:0] r_V_6_0_4_reg_1200;
wire   [17:0] r_V_6_0_5_fu_84_p2;
reg   [17:0] r_V_6_0_5_reg_1204;
wire   [17:0] r_V_6_0_6_fu_86_p2;
reg   [17:0] r_V_6_0_6_reg_1208;
wire   [17:0] r_V_6_0_7_fu_92_p2;
reg   [17:0] r_V_6_0_7_reg_1212;
wire   [17:0] r_V_6_1_fu_89_p2;
reg   [17:0] r_V_6_1_reg_1216;
wire   [17:0] r_V_6_1_1_fu_82_p2;
reg   [17:0] r_V_6_1_1_reg_1220;
wire   [17:0] r_V_6_1_2_fu_90_p2;
reg   [17:0] r_V_6_1_2_reg_1224;
wire   [17:0] r_V_6_1_3_fu_87_p2;
reg   [17:0] r_V_6_1_3_reg_1228;
wire   [17:0] r_V_6_1_4_fu_91_p2;
reg   [17:0] r_V_6_1_4_reg_1232;
wire   [17:0] r_V_6_1_5_fu_93_p2;
reg   [17:0] r_V_6_1_5_reg_1236;
wire   [17:0] r_V_6_1_6_fu_94_p2;
reg   [17:0] r_V_6_1_6_reg_1240;
wire   [17:0] r_V_6_1_7_fu_80_p2;
reg   [17:0] r_V_6_1_7_reg_1244;
wire  signed [17:0] r_V_1_fu_1261_p4;
wire    ap_block_pp0_stage0;
wire  signed [17:0] tmp_28_fu_1249_p1;
wire   [17:0] tmp_fu_1279_p2;
wire   [17:0] tmp1_fu_1291_p2;
wire   [17:0] tmp2_fu_1303_p2;
wire   [17:0] tmp3_fu_1315_p2;
wire   [17:0] tmp4_fu_1327_p2;
wire   [17:0] tmp5_fu_1339_p2;
wire   [17:0] tmp6_fu_1351_p2;
wire   [17:0] tmp7_fu_1363_p2;
wire   [17:0] res_0_V_write_assign_fu_1285_p2;
wire   [17:0] acc_1_V_fu_1297_p2;
wire   [17:0] acc_2_V_fu_1309_p2;
wire   [17:0] acc_3_V_fu_1321_p2;
wire   [17:0] acc_4_V_fu_1333_p2;
wire   [17:0] acc_5_V_fu_1345_p2;
wire   [17:0] acc_6_V_fu_1357_p2;
wire   [17:0] acc_7_V_fu_1369_p2;
reg    ap_ce_reg;
reg   [17:0] ap_return_0_int_reg;
reg   [17:0] ap_return_1_int_reg;
reg   [17:0] ap_return_2_int_reg;
reg   [17:0] ap_return_3_int_reg;
reg   [17:0] ap_return_4_int_reg;
reg   [17:0] ap_return_5_int_reg;
reg   [17:0] ap_return_6_int_reg;
reg   [17:0] ap_return_7_int_reg;

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_0_int_reg <= res_0_V_write_assign_fu_1285_p2;
        ap_return_1_int_reg <= acc_1_V_fu_1297_p2;
        ap_return_2_int_reg <= acc_2_V_fu_1309_p2;
        ap_return_3_int_reg <= acc_3_V_fu_1321_p2;
        ap_return_4_int_reg <= acc_4_V_fu_1333_p2;
        ap_return_5_int_reg <= acc_5_V_fu_1345_p2;
        ap_return_6_int_reg <= acc_6_V_fu_1357_p2;
        ap_return_7_int_reg <= acc_7_V_fu_1369_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_V_6_0_1_reg_1188 <= r_V_6_0_1_fu_85_p2;
        r_V_6_0_2_reg_1192 <= r_V_6_0_2_fu_95_p2;
        r_V_6_0_3_reg_1196 <= r_V_6_0_3_fu_88_p2;
        r_V_6_0_4_reg_1200 <= r_V_6_0_4_fu_83_p2;
        r_V_6_0_5_reg_1204 <= r_V_6_0_5_fu_84_p2;
        r_V_6_0_6_reg_1208 <= r_V_6_0_6_fu_86_p2;
        r_V_6_0_7_reg_1212 <= r_V_6_0_7_fu_92_p2;
        r_V_6_1_1_reg_1220 <= r_V_6_1_1_fu_82_p2;
        r_V_6_1_2_reg_1224 <= r_V_6_1_2_fu_90_p2;
        r_V_6_1_3_reg_1228 <= r_V_6_1_3_fu_87_p2;
        r_V_6_1_4_reg_1232 <= r_V_6_1_4_fu_91_p2;
        r_V_6_1_5_reg_1236 <= r_V_6_1_5_fu_93_p2;
        r_V_6_1_6_reg_1240 <= r_V_6_1_6_fu_94_p2;
        r_V_6_1_7_reg_1244 <= r_V_6_1_7_fu_80_p2;
        r_V_6_1_reg_1216 <= r_V_6_1_fu_89_p2;
        r_V_6_reg_1184 <= r_V_6_fu_81_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_0 = ap_return_0_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_0 = res_0_V_write_assign_fu_1285_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_1 = ap_return_1_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_1 = acc_1_V_fu_1297_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_2 = ap_return_2_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_2 = acc_2_V_fu_1309_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_3 = ap_return_3_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_3 = acc_3_V_fu_1321_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_4 = ap_return_4_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_4 = acc_4_V_fu_1333_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_5 = ap_return_5_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_5 = acc_5_V_fu_1345_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_6 = ap_return_6_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_6 = acc_6_V_fu_1357_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_7 = ap_return_7_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_7 = acc_7_V_fu_1369_p2;
    end
end

assign acc_1_V_fu_1297_p2 = (r_V_6_0_1_reg_1188 + tmp1_fu_1291_p2);

assign acc_2_V_fu_1309_p2 = (r_V_6_0_2_reg_1192 + tmp2_fu_1303_p2);

assign acc_3_V_fu_1321_p2 = (r_V_6_0_3_reg_1196 + tmp3_fu_1315_p2);

assign acc_4_V_fu_1333_p2 = (r_V_6_0_4_reg_1200 + tmp4_fu_1327_p2);

assign acc_5_V_fu_1345_p2 = (r_V_6_0_5_reg_1204 + tmp5_fu_1339_p2);

assign acc_6_V_fu_1357_p2 = (r_V_6_0_6_reg_1208 + tmp6_fu_1351_p2);

assign acc_7_V_fu_1369_p2 = (r_V_6_0_7_reg_1212 + tmp7_fu_1363_p2);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign r_V_1_fu_1261_p4 = {{data_V_read[49:32]}};

assign r_V_6_0_1_fu_85_p2 = ($signed(18'd258173) * $signed(tmp_28_fu_1249_p1));

assign r_V_6_0_2_fu_95_p2 = ($signed(18'd254061) * $signed(tmp_28_fu_1249_p1));

assign r_V_6_0_3_fu_88_p2 = ($signed({{1'b0}, {18'd5539}}) * $signed(tmp_28_fu_1249_p1));

assign r_V_6_0_4_fu_83_p2 = ($signed({{1'b0}, {18'd6496}}) * $signed(tmp_28_fu_1249_p1));

assign r_V_6_0_5_fu_84_p2 = ($signed({{1'b0}, {18'd8165}}) * $signed(tmp_28_fu_1249_p1));

assign r_V_6_0_6_fu_86_p2 = ($signed({{1'b0}, {18'd13918}}) * $signed(tmp_28_fu_1249_p1));

assign r_V_6_0_7_fu_92_p2 = ($signed({{1'b0}, {18'd9298}}) * $signed(tmp_28_fu_1249_p1));

assign r_V_6_1_1_fu_82_p2 = ($signed(18'd254254) * $signed(r_V_1_fu_1261_p4));

assign r_V_6_1_2_fu_90_p2 = ($signed(18'd257426) * $signed(r_V_1_fu_1261_p4));

assign r_V_6_1_3_fu_87_p2 = ($signed({{1'b0}, {18'd5117}}) * $signed(r_V_1_fu_1261_p4));

assign r_V_6_1_4_fu_91_p2 = ($signed(18'd251593) * $signed(r_V_1_fu_1261_p4));

assign r_V_6_1_5_fu_93_p2 = ($signed({{1'b0}, {18'd2015}}) * $signed(r_V_1_fu_1261_p4));

assign r_V_6_1_6_fu_94_p2 = ($signed(18'd256653) * $signed(r_V_1_fu_1261_p4));

assign r_V_6_1_7_fu_80_p2 = ($signed(18'd259131) * $signed(r_V_1_fu_1261_p4));

assign r_V_6_1_fu_89_p2 = ($signed({{1'b0}, {18'd4872}}) * $signed(r_V_1_fu_1261_p4));

assign r_V_6_fu_81_p2 = ($signed(18'd257524) * $signed(tmp_28_fu_1249_p1));

assign res_0_V_write_assign_fu_1285_p2 = (r_V_6_reg_1184 + tmp_fu_1279_p2);

assign tmp1_fu_1291_p2 = (18'd1786 + r_V_6_1_1_reg_1220);

assign tmp2_fu_1303_p2 = (18'd3848 + r_V_6_1_2_reg_1224);

assign tmp3_fu_1315_p2 = (18'd5213 + r_V_6_1_3_reg_1228);

assign tmp4_fu_1327_p2 = ($signed(18'd259497) + $signed(r_V_6_1_4_reg_1232));

assign tmp5_fu_1339_p2 = ($signed(18'd261366) + $signed(r_V_6_1_5_reg_1236));

assign tmp6_fu_1351_p2 = (18'd620 + r_V_6_1_6_reg_1240);

assign tmp7_fu_1363_p2 = ($signed(18'd260742) + $signed(r_V_6_1_7_reg_1244));

assign tmp_28_fu_1249_p1 = data_V_read[17:0];

assign tmp_fu_1279_p2 = (18'd2521 + r_V_6_1_reg_1216);

endmodule //dense_latency_ap_fixed_ap_fixed_18_4_5_3_0_config2_0_0_0_0_0_0_0_0_0
